// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="detect_overflow_detect_overflow,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.758000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=25,HLS_VERSION=2025_1}" *)

module detect_overflow (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        raw_sum,
        ap_return,
        ap_rst
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] raw_sum;
output  [0:0] ap_return;
input   ap_rst;

wire   [1:0] tmp_fu_38_p4;
wire   [0:0] icmp_ln4_fu_48_p2;
wire   [0:0] icmp_ln4_1_fu_54_p2;
wire    ap_ce_reg;

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign ap_return = (icmp_ln4_fu_48_p2 | icmp_ln4_1_fu_54_p2);

assign icmp_ln4_1_fu_54_p2 = (($signed(raw_sum) < $signed(5'd24)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_48_p2 = ((tmp_fu_38_p4 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_fu_38_p4 = {{raw_sum[4:3]}};

endmodule //detect_overflow
